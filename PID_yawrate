import cv2
import numpy as np
from pioneer_sdk import Pioneer, Camera

pioneer = Pioneer()
camera = Camera()

def load_coefficients(path):
    cv_file = cv2.FileStorage(path, cv2.FILE_STORAGE_READ)
    camera_matrix = cv_file.getNode("mtx").mat()
    dist_coeffs = cv_file.getNode("dist").mat()
    cv_file.release()
    return camera_matrix, dist_coeffs

aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_6X6_50)
aruco_params = cv2.aruco.DetectorParameters()
aruco_detector = cv2.aruco.ArucoDetector(aruco_dict, aruco_params)

camera_matrix, dist_coeffs = load_coefficients("data.yml")

size_of_marker = 0.05
points_of_marker = np.array([
    (size_of_marker / 2, -size_of_marker / 2, 0),
    (-size_of_marker / 2, -size_of_marker / 2, 0),
    (-size_of_marker / 2, size_of_marker / 2, 0),
    (size_of_marker / 2, size_of_marker / 2, 0),
])

class PIDController:
    def __init__(self, kp, ki, kd):
        self.kp = kp
        self.ki = ki
        self.kd = kd
        self.prev_error = 0
        self.integral = 0

    def update(self, error):
        self.integral += error
        derivative = error - self.prev_error
        output = self.kp * error + self.ki * self.integral + self.kd * derivative
        self.prev_error = error
        return output

def calculate_yaw_error(target_yaw, current_yaw):
    error = target_yaw - current_yaw
    if error > np.pi:
        error -= 2 * np.pi
    elif error < -np.pi:
        error += 2 * np.pi
    return error

def go_to_start_point():
    input(" ARM?")
    pioneer.arm()
    pioneer.takeoff()
    pioneer.go_to_local_point(x=0, y=0, z=1.3, yaw=0)
    while not pioneer.point_reached():
        pass

if __name__ == "__main__":


    # Поднимаем Pioneer Mini на высоту 1.2 метра
    go_to_start_point()

    target_yaw = 0
    pid_controller = PIDController(kp=0.8, ki=0.02, kd=0.05)

    pioneer.go_to_local_point_body_fixed(x=0,y=0,z=1.2,yaw=0)
    while True:
        try:
            frame = camera.get_cv_frame()
            if frame is not None:
                corners, ids, rejected = aruco_detector.detectMarkers(frame)
                if corners:
                    success, rvecs, tvecs = cv2.solvePnP(
                        points_of_marker, corners[0], camera_matrix, dist_coeffs
                    )

                    current_yaw = rvecs[2][0]
                    yaw_error = calculate_yaw_error(target_yaw, current_yaw)
                    yaw_rate = pid_controller.update(yaw_error)

                    cv2.putText(frame, f'Yaw Rotation: {np.degrees(current_yaw):.2f}', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

                    pioneer.set_manual_speed_body_fixed(vx=0, vy=0, vz=0, yaw_rate=yaw_rate)

                cv2.imshow("video", frame)
        except KeyboardInterrupt:
            pioneer.land()
            pioneer.disarm()
            del pioneer

        key = cv2.waitKey(1)
        if key == 27:  # Esc key
            break

    pioneer.land()
    cv2.destroyAllWindows()
